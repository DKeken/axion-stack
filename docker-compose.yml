services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: nestjs_api
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass password
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "password", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Commander - Modern Redis Admin Web UI
  redis-commander:
    image: rediscommander/redis-commander:latest
    restart: unless-stopped
    environment:
      REDIS_HOSTS: "local:redis:6379:0:password"
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: password
      REDIS_DB: 0
      HTTP_USER: admin
      HTTP_PASSWORD: admin
      PORT: 8081
    ports:
      - "8081:8081"
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8081"]
      interval: 30s
      timeout: 10s
      retries: 3

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3-management-alpine
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: password
      RABBITMQ_DEFAULT_VHOST: /
    ports:
      - "5672:5672" # AMQP port
      - "15672:15672" # Management UI port
      - "15692:15692" # Prometheus metrics port
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - rabbitmq_logs:/var/log/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: >
      sh -c "
        rabbitmq-plugins enable rabbitmq_prometheus rabbitmq_management &&
        rabbitmq-server
      "

  # Prometheus - Metrics Collection and Storage
  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Pushgateway - Metrics Gateway for Batch Jobs
  pushgateway:
    image: prom/pushgateway:latest
    restart: unless-stopped
    ports:
      - "9091:9091"
    volumes:
      - pushgateway_data:/var/lib/pushgateway
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9091/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana - Metrics Visualization Dashboard
  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    ports:
      - "3333:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    depends_on:
      prometheus:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Application (development)
  api:
    build:
      context: .
      dockerfile: apps/gateway/Dockerfile
      target: development
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 3001
      DATABASE_URL: "postgresql://postgres:password@postgres:5432/nestjs_api?schema=public"
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: password
      REDIS_DB: 0
      REDIS_KEY_PREFIX: "axion:"
      REDIS_TTL: 3600
      RABBITMQ_URL: "amqp://admin:password@rabbitmq:5672/"
      JWT_ACCESS_SECRET: "development-access-secret-key-32-chars-minimum"
      JWT_REFRESH_SECRET: "development-refresh-secret-key-32-chars-minimum"
      CORS_ORIGIN: "*"
      PROMETHEUS_PUSHGATEWAY_URL: "http://pushgateway:9091"
    ports:
      - "3001:3001"
    volumes:
      - ./apps/gateway:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      pushgateway:
        condition: service_healthy
    command: bun run start:dev

  # Auth Service (microservice)
  auth-service:
    build:
      context: .
      dockerfile: apps/_services/auth/Dockerfile
      target: development
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 3002
      DATABASE_URL: "postgresql://postgres:password@postgres:5432/nestjs_api?schema=public"
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: password
      REDIS_DB: 0
      REDIS_KEY_PREFIX: "axion:"
      REDIS_TTL: 3600
      RABBITMQ_URL: "amqp://admin:password@rabbitmq:5672/"
      JWT_ACCESS_SECRET: "development-access-secret-key-32-chars-minimum"
      JWT_REFRESH_SECRET: "development-refresh-secret-key-32-chars-minimum"
      CORS_ORIGIN: "*"
      PROMETHEUS_PUSHGATEWAY_URL: "http://pushgateway:9091"
    ports:
      - "3002:3002"
    volumes:
      - ./apps/_services/auth:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      pushgateway:
        condition: service_healthy
    command: bun run start:dev

  # User Service (microservice)
  user-service:
    build:
      context: .
      dockerfile: apps/_services/user/Dockerfile
      target: development
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 3003
      DATABASE_URL: "postgresql://postgres:password@postgres:5432/nestjs_api?schema=public"
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: password
      REDIS_DB: 0
      REDIS_KEY_PREFIX: "axion:"
      REDIS_TTL: 3600
      RABBITMQ_URL: "amqp://admin:password@rabbitmq:5672/"
      CORS_ORIGIN: "*"
      PROMETHEUS_PUSHGATEWAY_URL: "http://pushgateway:9091"
    ports:
      - "3003:3003"
    volumes:
      - ./apps/_services/user:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      pushgateway:
        condition: service_healthy
    command: bun run start:dev

  # Node Exporter - System Metrics
  node-exporter:
    image: prom/node-exporter:latest
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - "--path.procfs=/host/proc"
      - "--path.rootfs=/rootfs"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9100/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Exporter - Redis Metrics
  redis-exporter:
    image: oliver006/redis_exporter:latest
    restart: unless-stopped
    ports:
      - "9121:9121"
    environment:
      REDIS_ADDR: "redis://redis:6379"
      REDIS_PASSWORD: "password"
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9121/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Exporter - Database Metrics
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    restart: unless-stopped
    ports:
      - "9187:9187"
    environment:
      DATA_SOURCE_NAME: "postgresql://postgres:password@postgres:5432/nestjs_api?sslmode=disable"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9187/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  rabbitmq_logs:
  prometheus_data:
  grafana_data:
  pushgateway_data:

networks:
  default:
    name: nestjs-api-network
