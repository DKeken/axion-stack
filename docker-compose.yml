services:
  # PostgreSQL Database - Internal only, no external ports
  postgres:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: nestjs_api
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure-postgres-password-2024}
    # No external ports exposed - internal network only
    expose:
      - "5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and sessions - Internal only
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-secure-redis-password-2024}
    # No external ports exposed - internal network only
    expose:
      - "6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test:
        [
          "CMD",
          "redis-cli",
          "--no-auth-warning",
          "-a",
          "${REDIS_PASSWORD:-secure-redis-password-2024}",
          "ping",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Commander - Admin UI (Development only)
  redis-commander:
    image: rediscommander/redis-commander:latest
    restart: unless-stopped
    environment:
      REDIS_HOSTS: "local:redis:6379:0:${REDIS_PASSWORD:-secure-redis-password-2024}"
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-secure-redis-password-2024}
      REDIS_DB: 0
      HTTP_USER: ${REDIS_ADMIN_USER:-admin}
      HTTP_PASSWORD: ${REDIS_ADMIN_PASSWORD:-secure-redis-admin-2024}
      PORT: 8081
    # Only expose in development - comment out for production
    # ports:
    #   - "8081:8081"
    expose:
      - "8081"
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8081"]
      interval: 30s
      timeout: 10s
      retries: 3

  # RabbitMQ Message Broker - Secured
  rabbitmq:
    image: rabbitmq:3-management-alpine
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-axion_admin}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-secure-rabbitmq-password-2024}
      RABBITMQ_DEFAULT_VHOST: /
    # AMQP port exposed for microservices communication
    expose:
      - "5672"
      - "15692" # Prometheus metrics (internal only)
    # Management UI only in development
    # ports:
    #   - "15672:15672" # Comment out for production
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - rabbitmq_logs:/var/log/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: >
      sh -c "
        rabbitmq-plugins enable rabbitmq_prometheus rabbitmq_management &&
        rabbitmq-server
      "

  # Prometheus - Metrics Collection and Storage (Internal only)
  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    # Internal only - no external access to metrics
    expose:
      - "9090"
    # Only expose in development
    # ports:
    #   - "9090:9090"
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Pushgateway - Metrics Gateway for Batch Jobs (Internal only)
  pushgateway:
    image: prom/pushgateway:latest
    restart: unless-stopped
    # Internal only - microservices push metrics here
    expose:
      - "9091"
    # Only expose in development
    # ports:
    #   - "9091:9091"
    volumes:
      - pushgateway_data:/var/lib/pushgateway
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9091/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana - Metrics Visualization Dashboard (Secured)
  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    # External access with secure credentials
    ports:
      - "3333:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-secure-grafana-admin-2024}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_INSTALL_PLUGINS: grafana-piechart-panel
      # Security enhancements
      GF_SECURITY_DISABLE_GRAVATAR: true
      GF_SECURITY_COOKIE_SECURE: true
      GF_ANALYTICS_REPORTING_ENABLED: false
      GF_ANALYTICS_CHECK_FOR_UPDATES: false
    depends_on:
      prometheus:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Application (development)
  api:
    build:
      context: .
      dockerfile: apps/gateway/Dockerfile
      target: development
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 3001
      DATABASE_URL: "postgresql://postgres:${POSTGRES_PASSWORD:-secure-postgres-password-2024}@postgres:5432/nestjs_api?schema=public"
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-secure-redis-password-2024}
      REDIS_DB: 0
      REDIS_KEY_PREFIX: "axion:"
      REDIS_TTL: 3600
      RABBITMQ_URL: "amqp://${RABBITMQ_USER:-axion_admin}:${RABBITMQ_PASSWORD:-secure-rabbitmq-password-2024}@rabbitmq:5672/"
      JWT_ACCESS_SECRET: ${JWT_ACCESS_SECRET:-development-access-secret-key-32-chars-minimum}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-development-refresh-secret-key-32-chars-minimum}
      CORS_ORIGIN: "*"
      PROMETHEUS_PUSHGATEWAY_URL: "http://pushgateway:9091"
      METRICS_AUTH_TOKEN: "secure-metrics-token-2024"
    ports:
      - "3001:3001"
    volumes:
      - ./apps/gateway:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      pushgateway:
        condition: service_healthy
    command: bun run start:dev

  # Auth Service (microservice)
  auth-service:
    build:
      context: .
      dockerfile: apps/_services/auth/Dockerfile
      target: development
    restart: unless-stopped
    environment:
      NODE_ENV: development
      SERVICE_NAME: auth
      # PORT removed - microservice only via RabbitMQ
      DATABASE_URL: "postgresql://postgres:${POSTGRES_PASSWORD:-secure-postgres-password-2024}@postgres:5432/nestjs_api?schema=public"
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-secure-redis-password-2024}
      REDIS_DB: 0
      REDIS_KEY_PREFIX: "axion:"
      REDIS_TTL: 3600
      RABBITMQ_URL: "amqp://${RABBITMQ_USER:-axion_admin}:${RABBITMQ_PASSWORD:-secure-rabbitmq-password-2024}@rabbitmq:5672/"
      JWT_ACCESS_SECRET: ${JWT_ACCESS_SECRET:-development-access-secret-key-32-chars-minimum}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-development-refresh-secret-key-32-chars-minimum}
      PROMETHEUS_PUSHGATEWAY_URL: "http://pushgateway:9091"
    # No HTTP ports exposed - microservice only via RabbitMQ
    volumes:
      - ./apps/_services/auth:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      pushgateway:
        condition: service_healthy
    command: bun run start:dev

  # User Service (microservice)
  user-service:
    build:
      context: .
      dockerfile: apps/_services/user/Dockerfile
      target: development
    restart: unless-stopped
    environment:
      NODE_ENV: development
      SERVICE_NAME: user
      # PORT removed - microservice only via RabbitMQ
      DATABASE_URL: "postgresql://postgres:${POSTGRES_PASSWORD:-secure-postgres-password-2024}@postgres:5432/nestjs_api?schema=public"
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-secure-redis-password-2024}
      REDIS_DB: 0
      REDIS_KEY_PREFIX: "axion:"
      REDIS_TTL: 3600
      RABBITMQ_URL: "amqp://${RABBITMQ_USER:-axion_admin}:${RABBITMQ_PASSWORD:-secure-rabbitmq-password-2024}@rabbitmq:5672/"
      PROMETHEUS_PUSHGATEWAY_URL: "http://pushgateway:9091"
    # No HTTP ports exposed - microservice only via RabbitMQ
    volumes:
      - ./apps/_services/user:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      pushgateway:
        condition: service_healthy
    command: bun run start:dev

  # Node Exporter - System Metrics (Internal only)
  node-exporter:
    image: prom/node-exporter:latest
    restart: unless-stopped
    # Internal only - prometheus scrapes metrics
    expose:
      - "9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - "--path.procfs=/host/proc"
      - "--path.rootfs=/rootfs"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9100/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Exporter - Redis Metrics (Internal only)
  redis-exporter:
    image: oliver006/redis_exporter:latest
    restart: unless-stopped
    # Internal only - prometheus scrapes metrics
    expose:
      - "9121"
    environment:
      REDIS_ADDR: "redis://redis:6379"
      REDIS_PASSWORD: ${REDIS_PASSWORD:-secure-redis-password-2024}
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9121/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Exporter - Database Metrics (Internal only)
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    restart: unless-stopped
    # Internal only - prometheus scrapes metrics
    expose:
      - "9187"
    environment:
      DATA_SOURCE_NAME: "postgresql://postgres:${POSTGRES_PASSWORD:-secure-postgres-password-2024}@postgres:5432/nestjs_api?sslmode=disable"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9187/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  rabbitmq_logs:
  prometheus_data:
  grafana_data:
  pushgateway_data:

networks:
  default:
    name: nestjs-api-network
