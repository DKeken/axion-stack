import { CACHE_MANAGER } from '@nestjs/cache-manager';
import { Inject, Injectable, Logger } from '@nestjs/common';

import type { Cache } from 'cache-manager';

/**
 * Cache key registry for tracking cached keys by modules and operations
 */
interface CacheKeyRegistry {
  modules: Map<string, Set<string>>; // module -> keys
  operations: Map<string, Set<string>>; // module:operation -> keys
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ cache-manager
 */
interface RedisClient {
  keys: (pattern: string) => Promise<string[]>;
  [key: string]: unknown;
}

interface CacheStore {
  getClient?: () => RedisClient;
  [key: string]: unknown;
}

interface CacheManagerWithStore extends Omit<Cache, 'store'> {
  store?: CacheStore;
}

/**
 * Redis —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—ç—à–µ–º —á–µ—Ä–µ–∑ cache-manager
 * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —É–¥–æ–±–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Redis –∏ —Ä–µ–µ—Å—Ç—Ä–æ–º –∫–ª—é—á–µ–π
 */
@Injectable()
export class RedisService {
  private readonly logger = new Logger(RedisService.name);
  private readonly keyRegistry: CacheKeyRegistry = {
    modules: new Map(),
    operations: new Map(),
  };

  constructor(@Inject(CACHE_MANAGER) private readonly cacheManager: CacheManagerWithStore) {}

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫—ç—à —Å TTL
   */
  async set(key: string, value: string, ttlSeconds: number): Promise<void> {
    await this.cacheManager.set(key, value, ttlSeconds * 1000); // cache-manager –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–ª—é—á –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ä–µ–µ—Å—Ç—Ä–µ –¥–ª—è pattern search
    this.registerKey(key);
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫—ç—à —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –≤ —Ä–µ–µ—Å—Ç—Ä–µ
   */
  async setWithRegistry(
    key: string,
    value: string,
    ttlSeconds: number,
    module?: string,
    operation?: string
  ): Promise<void> {
    await this.set(key, value, ttlSeconds);
    this.registerKey(key, module, operation);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞
   */
  async get(key: string): Promise<string | undefined> {
    return await this.cacheManager.get<string>(key);
  }

  /**
   * –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á –∏–∑ –∫—ç—à–∞
   */
  async del(key: string): Promise<void> {
    await this.cacheManager.del(key);
    this.unregisterKey(key);
  }

  /**
   * –£–¥–∞–ª–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–π –∏–∑ –∫—ç—à–∞
   */
  async delMultiple(keys: string[]): Promise<void> {
    await Promise.all(keys.map((key) => this.cacheManager.del(key)));
    keys.forEach((key) => this.unregisterKey(key));
  }

  /**
   * –ò–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∫–ª—é—á–∏ –º–æ–¥—É–ª—è
   */
  async invalidateModule(module: string): Promise<number> {
    const moduleKeys = this.keyRegistry.modules.get(module);
    if (!moduleKeys || moduleKeys.size === 0) {
      this.logger.debug(`No keys found for module: ${module}`);
      return 0;
    }

    const keys = Array.from(moduleKeys);
    await this.delMultiple(keys);

    // –û—á–∏—â–∞–µ–º –∑–∞–ø–∏—Å–∏ –æ –º–æ–¥—É–ª–µ
    this.keyRegistry.modules.delete(module);

    // –û—á–∏—â–∞–µ–º –∑–∞–ø–∏—Å–∏ –æ–± –æ–ø–µ—Ä–∞—Ü–∏—è—Ö —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
    const operationKeysToDelete: string[] = [];
    for (const [operationKey] of this.keyRegistry.operations) {
      if (operationKey.startsWith(`${module}:`)) {
        operationKeysToDelete.push(operationKey);
      }
    }
    operationKeysToDelete.forEach((key) => this.keyRegistry.operations.delete(key));

    this.logger.debug(`Invalidated ${keys.length} keys for module: ${module}`);
    return keys.length;
  }

  /**
   * –ò–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∫–ª—é—á–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
   */
  async invalidateOperation(module: string, operation: string): Promise<number> {
    const operationKey = `${module}:${operation}`;
    const operationKeys = this.keyRegistry.operations.get(operationKey);

    if (!operationKeys || operationKeys.size === 0) {
      this.logger.debug(`No keys found for operation: ${operationKey}`);
      return 0;
    }

    const keys = Array.from(operationKeys);
    await this.delMultiple(keys);

    // –û—á–∏—â–∞–µ–º –∑–∞–ø–∏—Å–∏ –æ–± –æ–ø–µ—Ä–∞—Ü–∏–∏
    this.keyRegistry.operations.delete(operationKey);

    this.logger.debug(`Invalidated ${keys.length} keys for operation: ${operationKey}`);
    return keys.length;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–ª—é—á–∏ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
   */
  async keys(pattern: string): Promise<string[]> {
    try {
      this.logger.debug(`üîç [RedisService] Searching keys with pattern: ${pattern}`);

      // –ü–æ–ª—É—á–∞–µ–º Redis client –∏–∑ cache-manager
      const { store } = this.cacheManager;
      this.logger.debug(`üîå [RedisService] Store available: ${!!store}`);

      if (store?.getClient) {
        const client = store.getClient();
        this.logger.debug(
          `üîå [RedisService] Client available: ${!!client}, has keys method: ${client && typeof client.keys === 'function'}`
        );

        if (client && typeof client.keys === 'function') {
          const keys = await client.keys(pattern);
          this.logger.debug(
            `üîë [RedisService] Direct Redis found ${keys.length} keys: [${keys.slice(0, 5).join(', ')}${keys.length > 5 ? '...' : ''}]`
          );
          return keys;
        }
      }

      this.logger.warn(`‚ö†Ô∏è [RedisService] Falling back to registry search for pattern: ${pattern}`);
      // Fallback: –ø–æ–∏—Å–∫ –ø–æ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Ä–µ–µ—Å—Ç—Ä—É –∫–ª—é—á–µ–π
      return this.searchInRegistry(pattern);
    } catch (error) {
      this.logger.error(`‚ùå [RedisService] Error searching keys with pattern ${pattern}:`, error);
      return this.searchInRegistry(pattern);
    }
  }

  /**
   * –ü–æ–∏—Å–∫ –∫–ª—é—á–µ–π –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ä–µ–µ—Å—Ç—Ä–µ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
   */
  private searchInRegistry(pattern: string): string[] {
    const allKeys: string[] = [];

    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞
    for (const keys of this.keyRegistry.modules.values()) {
      allKeys.push(...Array.from(keys));
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º glob pattern –≤ regex
    const regexPattern = pattern.replace(/\*/g, '.*').replace(/\?/g, '.');
    const regex = new RegExp(`^${regexPattern}$`);

    const matchingKeys = allKeys.filter((key) => regex.test(key));
    this.logger.debug(
      `üîç Registry search found ${matchingKeys.length} keys matching pattern: ${pattern}`
    );

    return matchingKeys;
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫—ç—à
   */
  async reset(): Promise<void> {
    await this.cacheManager.reset();
    // –û—á–∏—â–∞–µ–º —Ç–∞–∫–∂–µ —Ä–µ–µ—Å—Ç—Ä –∫–ª—é—á–µ–π
    this.keyRegistry.modules.clear();
    this.keyRegistry.operations.clear();
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis (—ç–º—É–ª—è—Ü–∏—è ping)
   */
  async ping(): Promise<string> {
    try {
      // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –∑–∞–ø–∏—à–µ–º –∏ –ø—Ä–æ—á–∏—Ç–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
      const testKey = 'health-check';
      await this.set(testKey, 'pong', 1);
      const result = await this.get(testKey);
      await this.del(testKey);
      return result === 'pong' ? 'PONG' : 'ERROR';
    } catch {
      return 'ERROR';
    }
  }

  /**
   * –ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Redis pub/sub –∫–∞–Ω–∞–ª
   */
  async publish(channel: string, message: string): Promise<void> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º Redis client –∏–∑ cache-manager
      const { store } = this.cacheManager;

      if (store?.getClient) {
        const client = store.getClient();

        if (client && typeof client.publish === 'function') {
          await client.publish(channel, message);
          this.logger.debug(`üì¢ [RedisService] Published message to channel: ${channel}`);
          return;
        }
      }

      this.logger.warn(
        `‚ö†Ô∏è [RedisService] Redis publish not available, message not sent to channel: ${channel}`
      );
    } catch (error) {
      this.logger.error(`‚ùå [RedisService] Error publishing to channel ${channel}:`, error);
      throw error;
    }
  }

  /**
   * –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á –≤ —Ä–µ–µ—Å—Ç—Ä–µ
   */
  private registerKey(key: string, module?: string, operation?: string): void {
    if (module) {
      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–ª—é—á –¥–ª—è –º–æ–¥—É–ª—è
      if (!this.keyRegistry.modules.has(module)) {
        this.keyRegistry.modules.set(module, new Set());
      }
      const moduleSet = this.keyRegistry.modules.get(module);
      if (moduleSet) {
        moduleSet.add(key);
      }

      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–ª—é—á –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
      if (operation) {
        const operationKey = `${module}:${operation}`;
        if (!this.keyRegistry.operations.has(operationKey)) {
          this.keyRegistry.operations.set(operationKey, new Set());
        }
        const operationSet = this.keyRegistry.operations.get(operationKey);
        if (operationSet) {
          operationSet.add(key);
        }
      }
    }
  }

  /**
   * –†–∞–∑—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞
   */
  private unregisterKey(key: string): void {
    // –£–¥–∞–ª—è–µ–º –∫–ª—é—á –∏–∑ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
    for (const [module, keys] of this.keyRegistry.modules) {
      if (keys.has(key)) {
        keys.delete(key);
        // –ï—Å–ª–∏ –Ω–∞–±–æ—Ä –ø—É—Å—Ç–æ–π, —É–¥–∞–ª—è–µ–º –º–æ–¥—É–ª—å
        if (keys.size === 0) {
          this.keyRegistry.modules.delete(module);
        }
      }
    }

    // –£–¥–∞–ª—è–µ–º –∫–ª—é—á –∏–∑ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    for (const [operationKey, keys] of this.keyRegistry.operations) {
      if (keys.has(key)) {
        keys.delete(key);
        // –ï—Å–ª–∏ –Ω–∞–±–æ—Ä –ø—É—Å—Ç–æ–π, —É–¥–∞–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
        if (keys.size === 0) {
          this.keyRegistry.operations.delete(operationKey);
        }
      }
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ–µ—Å—Ç—Ä–∞ –∫–ª—é—á–µ–π
   */
  getRegistryStats(): {
    totalModules: number;
    totalOperations: number;
    totalKeys: number;
    moduleStats: Record<string, number>;
  } {
    const moduleStats: Record<string, number> = {};
    let totalKeys = 0;

    for (const [module, keys] of this.keyRegistry.modules) {
      moduleStats[module] = keys.size;
      totalKeys += keys.size;
    }

    return {
      totalModules: this.keyRegistry.modules.size,
      totalOperations: this.keyRegistry.operations.size,
      totalKeys,
      moduleStats,
    };
  }
}
